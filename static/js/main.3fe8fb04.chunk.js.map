{"version":3,"sources":["components/imageData.js","components/Cards.js","components/Score.js","components/Header.js","App.js","index.js"],"names":["images","id","src","name","SetUpCards","props","counter","className","onClick","process","imageData","Cards","currentScore","imgOrder","map","Score","highScore","Header","App","useState","setCurrentScore","setHighScore","selectedImg","setSelectedImg","obj","randomImgList","setRandomImgList","testState","setTestState","useEffect","imgIds","array","i","length","j","Math","floor","random","shuffle","includes","concat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAWeA,EAXA,CACX,CAAEC,GAAI,EAAGC,IAAK,kBAAmBC,KAAM,UACvC,CAAEF,GAAI,EAAGC,IAAK,kBAAmBC,KAAM,UACvC,CAAEF,GAAI,EAAGC,IAAK,oBAAqBC,KAAM,aACzC,CAAEF,GAAI,EAAGC,IAAK,oBAAqBC,KAAM,YACzC,CAAEF,GAAI,EAAGC,IAAK,qBAAsBC,KAAM,aAC1C,CAAEF,GAAI,EAAGC,IAAK,gBAAiBC,KAAM,QACrC,CAAEF,GAAI,EAAGC,IAAK,iBAAkBC,KAAM,SACtC,CAAEF,GAAI,EAAGC,IAAK,kBAAmBC,KAAM,W,cCarCC,EAAa,SAACC,GAAW,IACnBC,EAAgBD,EAAhBC,QAASL,EAAOI,EAAPJ,GAiBjB,OAdI,gCACI,wBACIM,UAAU,OACVC,QAAS,WACLF,EAAQL,IAHhB,SAMI,qBAAKC,IAAKO,oBAAyBC,EAAUT,GAAIC,QAErD,mBAAGK,UAAU,YAAb,SAA0BG,EAAUT,GAAIE,WA2BrCQ,EAlBD,SAACN,GAAU,IAMbC,EAAoCD,EAApCC,QAASM,EAA2BP,EAA3BO,aASjB,OAT4CP,EAAbQ,SACLC,KAAI,SAACb,GAAD,OAC1B,cAAC,EAAD,CAEIK,QAASA,EACTM,aAAcA,EACdX,GAAIA,GAJR,aACeA,QCxBRc,G,MAVD,SAACV,GAAW,IACdO,EAA4BP,EAA5BO,aAAcI,EAAcX,EAAdW,UACtB,OACI,sBAAKT,UAAU,aAAf,UACI,+CAAkBS,KAClB,iDAAoBJ,UCOjBK,G,MAZA,WACX,OACI,sBAAKV,UAAU,cAAf,UACI,kDACA,oFACA,8GCiFGW,G,MArFH,WAAM,MAE0BC,mBAAS,GAFnC,mBAEPP,EAFO,KAEOQ,EAFP,OAGoBD,mBAAS,GAH7B,mBAGPH,EAHO,KAGIK,EAHJ,OAKwBF,mBAAS,IALjC,mBAKPG,EALO,KAKMC,EALN,OAM4BJ,mBAAST,EAAUI,KAAI,SAACU,GAAD,OAASA,EAAIvB,OANhE,mBAMPwB,EANO,KAMQC,EANR,OAQoBP,mBAAS,GAR7B,mBAQPQ,EARO,KAQIC,EARJ,KAmBdC,qBAAU,WAEN,IAAMC,EAASpB,EAAUI,KAAI,SAACU,GAAD,OAASA,EAAIvB,OAV9B,SAAC8B,GACb,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADD,EAEhB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFgC,KAE5BD,EAAMG,GAFsB,MAU3CI,CAAQR,GACRJ,EAAiBI,GAITlB,EAAeI,GACfK,EAAaT,KAItB,CAACA,EAAcI,IAoBlB,OACI,sBAAKT,UAAU,iBAAf,UAEI,qBAAKA,UAAU,cAAf,SACI,cAAC,EAAD,MAGJ,qBAAKA,UAAU,kBAAf,SACI,cAAC,EAAD,CACIK,aAAcA,EACdI,UAAWA,MAInB,qBAAKT,UAAU,gBAAf,SACI,cAAC,EAAD,CACID,QAlCO,SAACL,GACAqB,EAAYiB,SAAStC,IAOrCmB,EAAgB,GAChBG,EAAe,MAJfA,EAAeD,EAAYkB,OAAO,CAACvC,KACnCmB,EAAgBR,EAAe,KA6BvBA,aAAcA,EACdC,SAAUY,MAKlB,qBAAKlB,UAAU,kBAAf,SAEI,wBAAQA,UAAU,WAAWC,QA9BvB,WACdoB,EAAaD,EAAY,IA6BjB,yBCvFhBc,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.3fe8fb04.chunk.js","sourcesContent":["const images = [\n    { id: 0, src: \"/img/benson.png\", name: \"Benson\" },\n    { id: 1, src: \"/img/eileen.png\", name: \"Eileen\" },\n    { id: 2, src: \"/img/hi5ghost.png\", name: \"Hi5 ghost\" },\n    { id: 3, src: \"/img/mordecai.png\", name: \"Mordecai\" },\n    { id: 4, src: \"/img/muscleman.png\", name: \"Muscleman\" },\n    { id: 5, src: \"/img/pops.png\", name: \"Pops\" },\n    { id: 6, src: \"/img/rigby.png\", name: \"Rigby\" },\n    { id: 7, src: \"/img/skipps.png\", name: \"Skipps\" },\n];\n\nexport default images;\n// https://stackoverflow.com/questions/51974767/getting-broken-image-in-react-app\n","/* eslint-disable react/jsx-indent-props */\n/* eslint-disable no-use-before-define */\n/* eslint-disable no-plusplus */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-const-assign */\n/* eslint-disable react/button-has-type */\n/* eslint-disable react/jsx-tag-spacing */\n/* eslint-disable jsx-a11y/alt-text */\n/* eslint-disable no-trailing-spaces */\n/* eslint-disable padded-blocks */\n/* eslint-disable arrow-body-style */\n/* eslint-disable react/jsx-filename-extension */\n/* eslint-disable react/jsx-indent */\n/* eslint-disable react/react-in-jsx-scope */\n\nimport React, { useEffect } from \"react\";\nimport imageData from \"./imageData\";\n\nimport \"../style/Cards.css\";\n\nconst SetUpCards = (props) => {\n    const { counter, id } = props;\n\n    const makeButtons = (\n        <div>\n            <button\n                className=\"btns\"\n                onClick={() => {\n                    counter(id);\n                }}\n            >\n                <img src={process.env.PUBLIC_URL + imageData[id].src} />\n            </button>\n            <p className=\"info-text\">{imageData[id].name}</p>\n        </div>\n\n    );\n\n    return makeButtons;\n\n};\n\nconst Cards = (props) => {\n    // console.log(\"I'm in Cards\");\n\n    // useEffect(() => {\n    //     console.log(\"test to set up random\");\n    // });\n    const { counter, currentScore, imgOrder } = props;\n    const newCards = imgOrder.map((id) => (\n        <SetUpCards \n            key={`img${id}`}\n            counter={counter} \n            currentScore={currentScore} \n            id={id}\n        />\n    ));\n    return newCards;\n};\n\nexport default Cards;\n\n// https://javascript.info/task/shuffle\n// How does useEffect work, read the article.\n\n// Do I need to seperate shuffle functions and card making into two components,\n// to make use of useEffect ?\n\n// Someway to make one default view, then it should change due to shuffle of array using useEffect.\n// Test button to test if it's working.\n\n// Using useEffect in either cards or setUpCards, need to pass shuffle functions in there.\n// Change setState of random id order in the useEffect.\n","/* eslint-disable react/jsx-one-expression-per-line */\n/* eslint-disable react/jsx-indent-props */\n/* eslint-disable no-use-before-define */\n/* eslint-disable no-plusplus */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-const-assign */\n/* eslint-disable react/button-has-type */\n/* eslint-disable react/jsx-tag-spacing */\n/* eslint-disable jsx-a11y/alt-text */\n/* eslint-disable no-trailing-spaces */\n/* eslint-disable padded-blocks */\n/* eslint-disable arrow-body-style */\n/* eslint-disable react/jsx-filename-extension */\n/* eslint-disable react/jsx-indent */\n/* eslint-disable react/react-in-jsx-scope */\nimport \"../style/Score.css\";\n\nconst Score = (props) => {\n    const { currentScore, highScore } = props;\n    return (\n        <div className=\"score-list\">\n            <h3> High Score: {highScore}</h3>\n            <h3>Current Score: {currentScore}</h3>\n        </div>\n    );\n};\n\nexport default Score;\n","/* eslint-disable react/jsx-one-expression-per-line */\n/* eslint-disable react/jsx-indent-props */\n/* eslint-disable no-use-before-define */\n/* eslint-disable no-plusplus */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-const-assign */\n/* eslint-disable react/button-has-type */\n/* eslint-disable react/jsx-tag-spacing */\n/* eslint-disable jsx-a11y/alt-text */\n/* eslint-disable no-trailing-spaces */\n/* eslint-disable padded-blocks */\n/* eslint-disable arrow-body-style */\n/* eslint-disable react/jsx-filename-extension */\n/* eslint-disable react/jsx-indent */\n/* eslint-disable react/react-in-jsx-scope */\nimport \"../style/Header.css\";\n\nconst Header = () => {\n    return (\n        <div className=\"header-comp\">\n            <h2>Memory Card Game</h2>\n            <p> Select a different image when the picture reloads.</p>\n            <p> This should be different compared to the last images you have selected.</p>\n            {   /* Hold previous pictures that you have selected and\n                select a new image that you have not selected. */}\n        </div>\n    );\n};\n\nexport default Header;\n","/* eslint-disable spaced-comment */\n/* eslint-disable no-trailing-spaces */\n/* eslint-disable react/jsx-indent-props */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-plusplus */\n/* eslint-disable prefer-const */\n/* eslint-disable no-unused-vars */\n/* eslint-disable arrow-body-style */\n/* eslint-disable react/jsx-filename-extension */\n/* eslint-disable react/jsx-indent */\n/* eslint-disable react/react-in-jsx-scope */\nimport React, { useState, useEffect } from \"react\";\nimport Cards from \"./components/Cards\";\nimport Score from \"./components/Score\";\nimport Header from \"./components/Header\";\nimport imageData from \"./components/imageData\";\n\nimport \"./style/App.css\";\n\nconst App = () => {\n    //// Set up States ////\n    const [currentScore, setCurrentScore] = useState(0);\n    const [highScore, setHighScore] = useState(0);\n    \n    const [selectedImg, setSelectedImg] = useState([]);\n    const [randomImgList, setRandomImgList] = useState(imageData.map((obj) => obj.id));\n\n    const [testState, setTestState] = useState(0);\n\n    //// Set up Functions ////\n    const shuffle = (array) => {\n        for (let i = array.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n        return array;\n    };\n\n    useEffect(() => {\n        // Shuffle Images\n        const imgIds = imageData.map((obj) => obj.id);\n        shuffle(imgIds);\n        setRandomImgList(imgIds);\n\n        // Set up high score\n        function highScoreChecker() {\n            if (currentScore > highScore) {\n                setHighScore(currentScore);\n            }\n        }\n        highScoreChecker();\n    }, [currentScore, highScore]);\n    \n    const counterChecker = (id) => {\n        const checkRepeat = selectedImg.includes(id);\n        // If the selected the user selected the same image or not.\n        // Also resets selected images and current score\n        if (!checkRepeat) {\n            setSelectedImg(selectedImg.concat([id]));\n            setCurrentScore(currentScore + 1);\n        } else {\n            setCurrentScore(0);\n            setSelectedImg([]);\n        }\n    };\n    // Just for testing\n    const testClick = () => {\n        setTestState(testState + 1);\n    };\n\n    //// Set up output ////\n    return (\n        <div className=\"main-container\">\n\n            <div className=\"main-header\">\n                <Header />\n            </div>\n\n            <div className=\"score-container\">\n                <Score \n                    currentScore={currentScore}\n                    highScore={highScore}\n                />\n            </div>\n\n            <div className=\"btn-container\">\n                <Cards\n                    counter={counterChecker}\n                    currentScore={currentScore}\n                    imgOrder={randomImgList}\n                />\n   \n            </div>\n\n            <div className=\"test-btn-holder\">\n                {/* eslint-disable-next-line react/button-has-type */}\n                <button className=\"test-btn\" onClick={testClick}>Test</button>\n            </div>\n\n        </div>\n        \n    );\n};\n\nexport default App;\n","/* eslint-disable react/jsx-filename-extension */\n/* eslint-disable arrow-body-style */\n/* eslint-disable react/jsx-filename-extension */\n/* eslint-disable react/jsx-indent */\n/* eslint-disable react/react-in-jsx-scope */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}